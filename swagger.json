{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Dim Tvaryn API",
    "description": "Dim Tvaryn API provides a comprehensive set of endpoints for managing animal adoption listings, user interactions, and platform functionalities. This online platform aims to connect homeless animals with potential adopters efficiently and securely.\n\nSome useful links:\n- [The Dim Tvaryn repository](https://github.com/orgs/Dim-Tvarin/repositories)"
  },
  "consumes": ["application/json", "multipart/form-data"],
  "produces": ["application/json"],
  "servers": [
    { "url": "https://marketplace-backend-wrk2.onrender.com" },
    { "url": "http://localhost:3001" }
  ],
  "tags": [
    {
      "name": "User",
      "description": "Operations about user"
    },
    {
      "name": "Animal",
      "description": "Everything about your Animals"
    }
  ],
  "paths": {
    "/users/register": {
      "post": {
        "tags": ["User"],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Created user object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "409": {
            "description": "User with this email is already registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/users/verify/{verificationToken}": {
      "get": {
        "tags": ["User"],
        "summary": "Verify user registration",
        "description": "This endpoint verifies the user's registration using the provided verification token.",
        "parameters": [
          {
            "name": "verificationToken",
            "in": "path",
            "required": true,
            "description": "The verification token for the user",
            "schema": {
              "type": "string",
              "example": "8d318807-e898-4962-a469-34fcab8aa692"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Verification successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or missing verification token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/users/verify": {
      "post": {
        "tags": ["User"],
        "summary": "Resend verification email",
        "description": "This endpoint allows users to request a new verification email if they did not receive the original one during registration.",
        "parameters": [],
        "requestBody": {
          "description": "User email for verification",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email"],
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "User's email",
                    "example": "adrien.brody@gmail.com",
                    "format": "email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Resend verification email successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Verification email has been sent" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or missing email",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "409": {
            "description": "User is already verified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "User is already verified" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["User"],
        "summary": "Logs user into the system",
        "parameters": [],
        "requestBody": {
          "description": "User login credentials",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid login input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "User is not verified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": ["User"],
        "summary": "Logs out current logged in user session",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {}
          },
          "401": {
            "description": "Invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": ["User"],
        "summary": "Get current user's information",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentUserDataResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/users/theme": {
      "patch": {
        "tags": ["User"],
        "summary": "Update user's theme",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "User's theme preference update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["theme"],
                "properties": {
                  "theme": {
                    "type": "string",
                    "description": "Preferred theme mode for the user",
                    "enum": ["light", "dark"],
                    "example": "light"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Theme has been successfully updated"
                    },
                    "theme": {
                      "type": "string",
                      "enum": ["light", "dark"],
                      "example": "light"
                    }
                  }
                }
              }
            }
          },
           "400": {
            "description": "Invalid theme input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/users/update": {
      "patch": {
        "tags": ["User"],
        "summary": "Update current user's information",
        "description": "Updates user's profile data, including name, email, location, phone, and avatar",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "User's profile data, including name, email, location, phone, and avatar",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserResponse"
                }
              }
            }
          },
           "400": {
            "description": "Invalid JSON format, invalid data or image upload failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "409": {
            "description": "User with this email is already registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/users/delete": {
      "delete": {
        "tags": ["User"],
        "summary": "Delete current user account",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {}
          },
          "401": {
            "description": "Invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/users/forgot-password": {
      "post": {
        "tags": ["User"],
        "summary": "Forgot user's password request",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset code sent to the user's email",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Reset password code has been sent to your email"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid email format or missing email",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/users/reset-password": {
      "post": {
        "tags": ["User"],
        "summary": "Confirm user's reset password code",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmResetPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reset password code verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfirmResetPasswordResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired reset password code",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["User"],
        "summary": "Reset user's password",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User password has been updated"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Password format is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "409": {
            "description": "New password cannot be the same as the old one",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/animals": {
      "get": {
        "tags": ["Animals"],
        "summary": "Get all animal ads",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": true,
            "description": "Page number",
            "schema": {
              "type": "integer",
              "example": "1"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "description": "Limit ads per page",
            "schema": {
              "type": "integer",
              "example": "4"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllAnimalsResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Animals"],
        "summary": "Create animal ad",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Created animal ad object",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateAnimalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAnimalResponse"
                }
              }
            }
          },
           "400": {
            "description": "Invalid JSON format, invalid data or image upload failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["name", "email", "location", "phone", "password", "repeat_password", "userType"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Едріан Броуді"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "example": "adrien.brody@gmail.com",
            "format": "email"
          },
          "location": {
            "type": "string",
            "description": "User's location",
            "example": "Київ"
          },
          "phone": {
            "type": "string",
            "description": "User's phone",
            "example": "+380637372966"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "Brutalist_2025"
          },
          "repeat_password": {
            "type": "string",
            "description": "User's repeated password to verify correctness",
            "example": "Brutalist_2025"
          },
          "userType": {
            "type": "string",
            "description": "User's role in the platform. Can be either 'guardian' (person who takes care of an animal) or 'adopter' (person looking to adopt an animal).",
            "enum": ["guardian", "adopter"],
            "example": "guardian"
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier for the user",
                "example": "67e29d3fa5c25980c6a582c5"
              },
              "name": {
                "type": "string",
                "description": "User's name",
                "example": "Едріан Броуді"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "example": "adrien.brody@gmail.com",
                "format": "email"
              },
              "location": {
                "type": "string",
                "description": "User's location",
                "example": "Київ"
              },
              "phone": {
                "type": "string",
                "description": "User's phone",
                "example": "+380637372966"
              },
              "userType": {
                "type": "string",
                "description": "User's role in the platform. Can be either 'guardian' (person who takes care of an animal) or 'adopter' (person looking to adopt an animal).",
                "enum": ["guardian", "adopter"],
                "example": "guardian"
              }
            }
          }
        }
      },
      "VerificationResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Verification successful"
          },
          "token": {
            "type": "string",
            "description": "User's token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3ZDk3YmViYjIxZjVlZGY4YWE4MzI5MCIsImlhdCI6MTc0MjMwNjMwNywiZXhwIjoxNzQyMzkyNzA3fQ.NmFDmJm-q7K2xpm5WOvUlelmmAnco5QEcjVBo13WSXE"
          },
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier for the user",
                "example": "67e29d3fa5c25980c6a582c5"
              },
              "name": {
                "type": "string",
                "description": "User's name",
                "example": "Едріан Броуді"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "example": "adrien.brody@gmail.com",
                "format": "email"
              },
              "location": {
                "type": "string",
                "description": "User's location",
                "example": "Київ"
              },
              "phone": {
                "type": "string",
                "description": "User's phone",
                "example": "+380637372966"
              },
              "userType": {
                "type": "string",
                "description": "User's role in the platform. Can be either 'guardian' (person who takes care of an animal) or 'adopter' (person looking to adopt an animal).",
                "enum": ["guardian", "adopter"],
                "example": "guardian"
              }
            }
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "example": "adrien.brody@gmail.com",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "Brutalist_2025"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "User's token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3ZDk3YmViYjIxZjVlZGY4YWE4MzI5MCIsImlhdCI6MTc0MjMwNjMwNywiZXhwIjoxNzQyMzkyNzA3fQ.NmFDmJm-q7K2xpm5WOvUlelmmAnco5QEcjVBo13WSXE"
          },
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier for the user",
                "example": "67e29d3fa5c25980c6a582c5"
              },
              "name": {
                "type": "string",
                "description": "User's name",
                "example": "Едріан Броуді"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "example": "adrien.brody@gmail.com",
                "format": "email"
              },
              "location": {
                "type": "string",
                "description": "User's location",
                "example": "Київ"
              },
              "phone": {
                "type": "string",
                "description": "User's phone",
                "example": "+380637372966"
              },
              "userType": {
                "type": "string",
                "description": "User's role in the platform. Can be either 'guardian' (person who takes care of an animal) or 'adopter' (person looking to adopt an animal).",
                "enum": ["guardian", "adopter"],
                "example": "guardian"
              },
              "avatarURL": {
                "type": "string",
                "description": "User's avatar",
                "example": "https://res.cloudinary.com/djahbmk0e/image/upload/c_auto,f_auto,g_auto,h_500,q_auto:best,w_500/v1/users/wzii0crzi0foppdrwf0e?_a=BAMCkGP80"
              },
              "theme": {
                "type": "string",
                "description": "User's theme",
                "example": "light"
              }
            }
          }
        }
      },
      "CurrentUserDataResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier for the user",
                "example": "67e29d3fa5c25980c6a582c5"
              },
              "name": {
                "type": "string",
                "description": "User's name",
                "example": "Едріан Броуді"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "example": "adrien.brody@gmail.com",
                "format": "email"
              },
              "location": {
                "type": "string",
                "description": "User's location",
                "example": "Київ"
              },
              "phone": {
                "type": "string",
                "description": "User's phone",
                "example": "+380637372966"
              },
              "userType": {
                "type": "string",
                "description": "User's role in the platform. Can be either 'guardian' (person who takes care of an animal) or 'adopter' (person looking to adopt an animal).",
                "enum": ["guardian", "adopter"],
                "example": "guardian"
              },
              "avatarURL": {
                "type": "string",
                "description": "User's avatar",
                "example": "https://res.cloudinary.com/djahbmk0e/image/upload/c_auto,f_auto,g_auto,h_500,q_auto:best,w_500/v1/users/wzii0crzi0foppdrwf0e?_a=BAMCkGP80"
              },
              "theme": {
                "type": "string",
                "description": "User's theme",
                "enum": ["light", "dark"],
                "example": "light"
              }
            }
          }
        }
      },
      "UpdateUserRequest": {
        "type": "object",
        "properties": {
          "userData": {
            "type": "string",
            "description": "JSON string containing user data (name, email, location, phone)",
            "example": "{\"name\": \"Едріан Броуді\", \"email\": \"adrien.brody@yahoo.com\", \"location\": \"Львів\", \"phone\": \"+380630000001\"}"
          },
          "avatar": {
            "type": "string",
            "format": "binary",
            "description": "Image file to update the user's avatar"
          }
        }
      },
      "UpdateUserResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "User profile has been updated"
          },
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier for the user",
                "example": "67e29d3fa5c25980c6a582c5"
              },
              "name": {
                "type": "string",
                "description": "User's name",
                "example": "Едріан Броуді"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "example": "adrien.brody@gmail.com",
                "format": "email"
              },
              "location": {
                "type": "string",
                "description": "User's location",
                "example": "Київ"
              },
              "phone": {
                "type": "string",
                "description": "User's phone",
                "example": "+380637372966"
              },
              "avatarURL": {
                "type": "string",
                "description": "User's avatar",
                "example": "https://res.cloudinary.com/djahbmk0e/image/upload/c_auto,f_auto,g_auto,h_500,q_auto:best,w_500/v1/users/wzii0crzi0foppdrwf0e?_a=BAMCkGP80"
              },
              "theme": {
                "type": "string",
                "description": "User's theme",
                "enum": ["light", "dark"],
                "example": "light"
              }
            }
          }
        }
      },
      "ForgotPasswordRequest": {
        "type": "object",
        "required": ["email"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email address",
            "example": "adrien.brody@gmail.com"
          }
        }
      },
      "ConfirmResetPasswordRequest": {
        "type": "object",
        "required": ["resetPasswordCode"],
        "properties": {
          "resetPasswordCode": {
            "type": "string",
            "description": "User's reset password code",
            "example": "570062"
          }
        }
      },
      "ConfirmResetPasswordResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Reset password verification successful"
          },
          "token": {
            "type": "string",
            "description": "User's token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3ZDk3YmViYjIxZjVlZGY4YWE4MzI5MCIsImlhdCI6MTc0MjMwNjMwNywiZXhwIjoxNzQyMzkyNzA3fQ.NmFDmJm-q7K2xpm5WOvUlelmmAnco5QEcjVBo13WSXE"
          },
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier for the user",
                "example": "67e29d3fa5c25980c6a582c5"
              },
              "name": {
                "type": "string",
                "description": "User's name",
                "example": "Едріан Броуді"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "example": "adrien.brody@gmail.com",
                "format": "email"
              },
              "location": {
                "type": "string",
                "description": "User's location",
                "example": "Київ"
              },
              "phone": {
                "type": "string",
                "description": "User's phone",
                "example": "+380637372966"
              },
              "userType": {
                "type": "string",
                "description": "User's role in the platform. Can be either 'guardian' (person who takes care of an animal) or 'adopter' (person looking to adopt an animal).",
                "enum": ["guardian", "adopter"],
                "example": "guardian"
              },
              "avatarURL": {
                "type": "string",
                "description": "User's avatar",
                "example": "https://res.cloudinary.com/djahbmk0e/image/upload/c_auto,f_auto,g_auto,h_500,q_auto:best,w_500/v1/users/wzii0crzi0foppdrwf0e?_a=BAMCkGP80"
              },
              "theme": {
                "type": "string",
                "description": "User's theme",
                "enum": ["light", "dark"],
                "example": "light"
              }
            }
          }
        }
      },
      "ResetPasswordRequest": {
        "type": "object",
        "required": ["password", "repeat_password"],
        "properties": {
          "password": {
            "type": "string",
            "description": "New password for the user",
            "example": "Brutalist_0001"
          },
          "repeat_password": {
            "type": "string",
            "description": "Repeat new password for the user",
            "example": "Brutalist_0001"
          }
        }
      },
      "GetAllAnimalsResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "Total number of animal ads",
            "example": 2
          },
          "animals": {
            "type": "array",
            "description": "List of animal ads",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique identifier for the animal ad",
                  "example": "67dae0170c7810a7f785dee7"
                },
                "animalName": {
                  "type": "string",
                  "description": "Name of the animal",
                  "example": "Спарк"
                },
                "animalType": {
                  "type": "string",
                  "description": "Type of the animal",
                  "example": "собака"
                },
                "breed": {
                  "type": "string",
                  "description": "Breed of the animal",
                  "example": "Джек-рассел-тер'єр"
                },
                "age": {
                  "type": "object",
                  "description": "Age of the animal",
                  "properties": {
                    "years": {
                      "type": "integer",
                      "description": "Number of years of the animal",
                      "example": "3"
                    },
                    "months": {
                      "type": "integer",
                      "description": "Number of months of the animal",
                      "example": "11"
                    }
                  }
                },
                "gender": {
                  "type": "string",
                  "description": "Gender of the animal",
                  "enum": ["male", "female", "unknown"],
                  "example": "male"
                },
                "animalLocation": {
                  "type": "string",
                  "description": "Location where the animal is available",
                  "example": "Київ"
                },
                "adText": {
                  "type": "string",
                  "description": "Description of the animal",
                  "example": "Спарк - енергійний та грайливий собака, який шукає люблячу родину. Він обожнює активні прогулянки, легко знаходить спільну мову з дітьми та добре ладнає з іншими тваринами."
                },
                "animalImages": {
                  "type": "array",
                  "description": "List of URLs for animal images",
                  "items": {
                    "type": "string",
                    "format": "uri",
                    "example": "https://res.cloudinary.com/djahbmk0e/image/upload/c_auto,f_auto,g_auto,h_1000,q_auto:best,w_1000/v1/animals/qtjuryhmba0j5i1d3ziy?_a=BAMCkGP80"
                  },
                  "example": [
                    "https://res.cloudinary.com/djahbmk0e/image/upload/c_auto,f_auto,g_auto,h_1000,q_auto:best,w_1000/v1/animals/qtjuryhmba0j5i1d3ziy?_a=BAMCkGP80",
                    "https://res.cloudinary.com/djahbmk0e/image/upload/c_auto,f_auto,g_auto,h_1000, q_auto:best,w_1000/v1/animals/qfrutuujzqnlzft9inmm?_a=BAMCkGP80"
                  ]
                },
                "status": {
                  "type": "string",
                  "description": "Status of the animal ad",
                  "enum": ["active", "inactive"],
                  "example": "active"
                },
                "owner": {
                  "type": "string",
                  "description": "User ID of the owner",
                  "example": "67dadd700c7810a7f785decd"
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Timestamp when the ad was created",
                  "example": "2025-03-19T15:17:43.934Z"
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Timestamp when the ad was last updated",
                  "example": "2025-03-19T15:17:43.934Z"
                }
              }
            },
            "example": [
              {
                "id": "67dae0170c7810a7f785dee7",
                "animalName": "Спарк",
                "animalType": "собака",
                "breed": "Джек-рассел-тер'єр",
                "age": {
                  "years": 4,
                  "months": 5
                },
                "gender": "male",
                "animalLocation": "Київ",
                "adText": "Спарк - енергійний та грайливий собака, який шукає люблячу родину. Він обожнює активні прогулянки, легко знаходить спільну мову з дітьми та добре ладнає з іншими тваринами.",
                "animalImages": [
                  "https://res.cloudinary.com/djahbmk0e/image/upload/c_auto,f_auto,g_auto,h_1000,q_auto:best,w_1000/v1/animals/qtjuryhmba0j5i1d3ziy?_a=BAMCkGP80",
                  "https://res.cloudinary.com/djahbmk0e/image/upload/c_auto,f_auto,g_auto,h_1000, q_auto:best,w_1000/v1/animals/qfrutuujzqnlzft9inmm?_a=BAMCkGP80"
                ],
                "status": "active",
                "owner": "67dadd700c7810a7f785decd",
                "createdAt": "2025-03-19T15:17:43.934Z",
                "updatedAt": "2025-03-19T15:17:43.934Z"
              },
              {
                "id": "67dae0170c7810a7f785dee8",
                "animalName": "Луна",
                "animalType": "собака",
                "breed": "Німецька вівчарка",
                "age": {
                  "years": 3,
                  "months": 11
                },
                "gender": "female",
                "animalLocation": "Львів",
                "adText": "Рокі - спокійна та віддана собака, шукає добрих господарів. Вона любить довгі прогулянки та добре ладнає з іншими тваринами.",
                "animalImages": [
                  "https://res.cloudinary.com/djahbmk0e/image/upload/c_auto,f_auto,g_auto,h_1000,q_auto:best,w_1000/v1/animals/qtjuryhmba0j5i1d3ziy?_a=BAMCkGP81"
                ],
                "status": "active",
                "owner": "67dadd700c7810a7f785decd",
                "createdAt": "2025-03-19T15:18:43.934Z",
                "updatedAt": "2025-03-19T15:18:43.934Z"
              }
            ]
          }
        }
      },
      "CreateAnimalRequest": {
        "type": "object",
        "required": ["animalData", "images"],
        "properties": {
          "animalData": {
            "type": "string",
            "description": "JSON string containing animal data (animalName, animalType, breed, age, gender, animalLocation, adText)",
            "example": "{\"animalName\": \"Спарк\", \"animalType\": \"собака\", \"breed\": \"Джек-рассел-тер'єр\", \"age\": {\"years\": 2, \"months\": 3}, \"gender\": \"male\", \"animalLocation\": \"Київ\", \"adText\": \"Спарк - енергійний та грайливий собака, який шукає люблячу родину. Він обожнює активні прогулянки, легко знаходить спільну мову з дітьми та добре ладнає з іншими тваринами.\"}"
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "binary"
            },
            "description": "Array of image files (up to 4 images) for the animal ad",
            "maxItems": 4
          }
        }
      },
      "CreateAnimalResponse": {
        "type": "object",
        "properties": {
          "animal": {
            "type": "object",
            "properties": {
              "id": {
                  "type": "string",
                  "description": "Unique identifier for the animal ad",
                  "example": "67dae0170c7810a7f785dee7"
                },
              "animalName": {
                "type": "string",
                "description": "Name of the animal",
                "example": "Спарк"
              },
              "animalType": {
                "type": "string",
                "description": "Type of the animal",
                "example": "собака"
              },
              "breed": {
                "type": "string",
                "description": "Breed of the animal",
                "example": "Джек-рассел-тер'єр"
              },
              "age": {
                  "type": "object",
                  "description": "Age of the animal",
                  "properties": {
                    "years": {
                      "type": "integer",
                      "description": "Number of years of the animal",
                      "example": "2"
                    },
                    "months": {
                      "type": "integer",
                      "description": "Number of months of the animal",
                      "example": "3"
                    }
                  }
              },
              "gender": {
                "type": "string",
                "description": "Gender of the animal",
                "enum": ["male", "female", "unknown"],
                "example": "male"
              },
              "animalLocation": {
                "type": "string",
                "description": "Location where the animal is available",
                "example": "Київ"
              },
              "adText": {
                "type": "string",
                "description": "Description of the animal",
                "example": "Спарк - енергійний та грайливий собака, який шукає люблячу родину. Він обожнює активні прогулянки, легко знаходить спільну мову з дітьми та добре ладнає з іншими тваринами."
              },
              "animalImages": {
                "type": "array",
                "description": "List of URLs for animal images",
                "items": {
                  "type": "string",
                  "format": "uri",
                  "example": "https://res.cloudinary.com/djahbmk0e/image/upload/c_auto,f_auto,g_auto,h_1000,q_auto:best,w_1000/v1/animals/qtjuryhmba0j5i1d3ziy?_a=BAMCkGP80"
                },
                "example": [
                  "https://res.cloudinary.com/djahbmk0e/image/upload/c_auto,f_auto,g_auto,h_1000,q_auto:best,w_1000/v1/animals/qtjuryhmba0j5i1d3ziy?_a=BAMCkGP80",
                    "https://res.cloudinary.com/djahbmk0e/image/upload/c_auto,f_auto,g_auto,h_1000, q_auto:best,w_1000/v1/animals/qfrutuujzqnlzft9inmm?_a=BAMCkGP80"
                ]
              },
              "status": {
                "type": "string",
                "description": "Status of the animal ad",
                "enum": ["active", "inactive"],
                "example": "active"
              },
              "owner": {
                "type": "string",
                "description": "User ID of the owner",
                "example": "67dadd700c7810a7f785decd"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the ad was created",
                "example": "2025-03-19T15:17:43.934Z"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the ad was last updated",
                "example": "2025-03-19T15:17:43.934Z"
              }
            }
          },
          "ownerName": {
            "type": "string",
            "description": "Owner's name",
            "example": "Едріан Броуді"
          },
            "ownerPhone": {
            "type": "string",
            "description": "Owner's phone",
            "example": "+380637372966"
          }
        }
      },
      "Error400": {
        "type": "object",
        "properties": {
          "message": { "type": "string", "example": "Invalid request data" }
        }
      },
      "Error401": {
        "type": "object",
        "properties": {
          "message": { "type": "string", "example": "Invalid credentials" }
        }
      },
      "Error403": {
        "type": "object",
        "properties": {
          "message": { "type": "string", "example": "User is not verified" }
        }
      },
      "Error404": {
        "type": "object",
        "properties": {
          "message": { "type": "string", "example": "Resource not found" }
        }
      },
      "Error409": {
        "type": "object",
        "properties": {
          "message": { "type": "string", "example": "Request cannot be processed due to conflicting duplicate data" }
        }
      },
      "Error500": {
        "type": "object",
        "properties": {
          "message": { "type": "string", "example": "Internal server error. Please try again later" }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}