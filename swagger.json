{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Dim Tvaryn API",
    "description": "Dim Tvaryn API provides a comprehensive set of endpoints for managing animal adoption listings, user interactions, and platform functionalities. This online platform aims to connect homeless animals with potential adopters efficiently and securely.\n\nSome useful links:\n- [The Dim Tvaryn repository](https://github.com/orgs/Dim-Tvarin/repositories)"
  },
  "consumes": ["application/json", "multipart/form-data"],
  "produces": ["application/json"],
  "servers": [
    { "url": "https://marketplace-backend-wrk2.onrender.com" },
    { "url": "http://localhost:3001" }
  ],
  "tags": [
    {
      "name": "User",
      "description": "Operations about user"
    },
    {
      "name": "Animal",
      "description": "Everything about your Animals"
    }
  ],
  "paths": {
    "/users/register": {
      "post": {
        "tags": ["User"],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Created user object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "409": {
            "description": "Email in use",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/users/verify/{verificationToken}": {
      "get": {
        "tags": ["User"],
        "summary": "Verify user registration",
        "description": "This endpoint verifies the user's registration using the provided verification token.",
        "parameters": [
          {
            "name": "verificationToken",
            "in": "path",
            "required": true,
            "description": "The verification token for the user",
            "schema": {
              "type": "string",
              "example": "8d318807-e898-4962-a469-34fcab8aa692"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Verification successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or missing verification token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/users/verify": {
      "post": {
        "tags": ["User"],
        "summary": "Resend verification email",
        "description": "This endpoint allows users to request a new verification email if they did not receive the original one during registration.",
        "parameters": [],
        "requestBody": {
          "description": "User email for verification",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email"],
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "User's email",
                    "example": "adrien.brody@gmail.com",
                    "format": "email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Resend verification email successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Verification email has been sent" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or missing email",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "409": {
            "description": "User is already verified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "User is already verified" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["User"],
        "summary": "Logs user into the system",
        "parameters": [],
        "requestBody": {
          "description": "User login credentials",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid login input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "User is not verified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": ["User"],
        "summary": "Logs out current logged in user session",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {}
          },
          "401": {
            "description": "Invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": ["User"],
        "summary": "Get current user's information",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentUserDataResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/users/theme": {
      "patch": {
        "tags": ["User"],
        "summary": "Update user's theme",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "User's theme preference update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["theme"],
                "properties": {
                  "theme": {
                    "type": "string",
                    "description": "Preferred theme mode for the user",
                    "enum": ["light", "dark"],
                    "example": "light"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Theme has been successfully updated"
                    },
                    "theme": {
                      "type": "string",
                      "enum": ["light", "dark"],
                      "example": "light"
                    }
                  }
                }
              }
            }
          },
           "400": {
            "description": "Invalid theme input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/users/update": {
      "patch": {
        "tags": ["User"],
        "summary": "Update current user's information",
        "description": "Updates user's profile data, including name, email, location, phone, and avatar",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserResponse"
                }
              }
            }
          },
           "400": {
            "description": "Invalid JSON format or invalid data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "409": {
            "description": "Email in use",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/users/delete": {
      "delete": {
        "tags": ["User"],
        "summary": "Delete current user account",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {}
          },
          "401": {
            "description": "Invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["name", "email", "location", "phone", "password", "repeat_password", "userType"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Едріан Броуді"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "example": "adrien.brody@gmail.com",
            "format": "email"
          },
          "location": {
            "type": "string",
            "description": "User's location",
            "example": "Київ"
          },
          "phone": {
            "type": "string",
            "description": "User's phone",
            "example": "+380637372966"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "Brutalist_2025"
          },
          "repeat_password": {
            "type": "string",
            "description": "User's repeated password to verify correctness",
            "example": "Brutalist_2025"
          },
          "userType": {
            "type": "string",
            "description": "User's role in the platform. Can be either 'guardian' (person who takes care of an animal) or 'adopter' (person looking to adopt an animal).",
            "enum": ["guardian", "adopter"],
            "example": "guardian"
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "User's name",
                "example": "Едріан Броуді"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "example": "adrien.brody@gmail.com",
                "format": "email"
              },
              "location": {
                "type": "string",
                "description": "User's location",
                "example": "Київ"
              },
              "phone": {
                "type": "string",
                "description": "User's phone",
                "example": "+380637372966"
              },
              "userType": {
                "type": "string",
                "description": "User's role in the platform. Can be either 'guardian' (person who takes care of an animal) or 'adopter' (person looking to adopt an animal).",
                "enum": ["guardian", "adopter"],
                "example": "guardian"
              }
            }
          }
        }
      },
      "VerificationResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Verification successful"
          },
          "token": {
            "type": "string",
            "description": "User's token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3ZDk3YmViYjIxZjVlZGY4YWE4MzI5MCIsImlhdCI6MTc0MjMwNjMwNywiZXhwIjoxNzQyMzkyNzA3fQ.NmFDmJm-q7K2xpm5WOvUlelmmAnco5QEcjVBo13WSXE"
          },
          "user": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "User's name",
                "example": "Едріан Броуді"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "example": "adrien.brody@gmail.com",
                "format": "email"
              },
              "location": {
                "type": "string",
                "description": "User's location",
                "example": "Київ"
              },
              "phone": {
                "type": "string",
                "description": "User's phone",
                "example": "+380637372966"
              },
              "userType": {
                "type": "string",
                "description": "User's role in the platform. Can be either 'guardian' (person who takes care of an animal) or 'adopter' (person looking to adopt an animal).",
                "enum": ["guardian", "adopter"],
                "example": "guardian"
              }
            }
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "example": "adrien.brody@gmail.com",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "Brutalist_2025"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "User's token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3ZDk3YmViYjIxZjVlZGY4YWE4MzI5MCIsImlhdCI6MTc0MjMwNjMwNywiZXhwIjoxNzQyMzkyNzA3fQ.NmFDmJm-q7K2xpm5WOvUlelmmAnco5QEcjVBo13WSXE"
          },
          "user": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "User's name",
                "example": "Едріан Броуді"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "example": "adrien.brody@gmail.com",
                "format": "email"
              },
              "location": {
                "type": "string",
                "description": "User's location",
                "example": "Київ"
              },
              "phone": {
                "type": "string",
                "description": "User's phone",
                "example": "+380637372966"
              },
              "userType": {
                "type": "string",
                "description": "User's role in the platform. Can be either 'guardian' (person who takes care of an animal) or 'adopter' (person looking to adopt an animal).",
                "enum": ["guardian", "adopter"],
                "example": "guardian"
              },
              "avatarURL": {
                "type": "string",
                "description": "User's avatar",
                "example": "https://res.cloudinary.com/djahbmk0e/image/upload/c_auto,f_auto,g_auto,h_500,q_auto:best,w_500/v1/users/wzii0crzi0foppdrwf0e?_a=BAMCkGP80"
              },
              "theme": {
                "type": "string",
                "description": "User's theme",
                "example": "light"
              }
            }
          }
        }
      },
      "CurrentUserDataResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "User's name",
                "example": "Едріан Броуді"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "example": "adrien.brody@gmail.com",
                "format": "email"
              },
              "location": {
                "type": "string",
                "description": "User's location",
                "example": "Київ"
              },
              "phone": {
                "type": "string",
                "description": "User's phone",
                "example": "+380637372966"
              },
              "userType": {
                "type": "string",
                "description": "User's role in the platform. Can be either 'guardian' (person who takes care of an animal) or 'adopter' (person looking to adopt an animal).",
                "enum": ["guardian", "adopter"],
                "example": "guardian"
              },
              "avatarURL": {
                "type": "string",
                "description": "User's avatar",
                "example": "https://res.cloudinary.com/djahbmk0e/image/upload/c_auto,f_auto,g_auto,h_500,q_auto:best,w_500/v1/users/wzii0crzi0foppdrwf0e?_a=BAMCkGP80"
              },
              "theme": {
                "type": "string",
                "description": "User's theme",
                "enum": ["light", "dark"],
                "example": "light"
              }
            }
          }
        }
      },
      "UpdateUserRequest": {
        "type": "object",
        "properties": {
          "userData": {
            "type": "string",
            "description": "JSON string containing user data (name, email, location, phone)",
            "example": "{\"name\": \"Едріан Броуді\", \"email\": \"adrien.brody@yahoo.com\", \"location\": \"Львів\", \"phone\": \"+380630000001\"}"
          },
          "avatar": {
            "type": "string",
            "format": "binary",
            "description": "Image file to update the user's avatar"
          }
        }
      },
      "UpdateUserResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "User profile has been updated"
          },
          "user": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "User's name",
                "example": "Едріан Броуді"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "example": "adrien.brody@gmail.com",
                "format": "email"
              },
              "location": {
                "type": "string",
                "description": "User's location",
                "example": "Київ"
              },
              "phone": {
                "type": "string",
                "description": "User's phone",
                "example": "+380637372966"
              },
              "avatarURL": {
                "type": "string",
                "description": "User's avatar",
                "example": "https://res.cloudinary.com/djahbmk0e/image/upload/c_auto,f_auto,g_auto,h_500,q_auto:best,w_500/v1/users/wzii0crzi0foppdrwf0e?_a=BAMCkGP80"
              },
              "theme": {
                "type": "string",
                "description": "User's theme",
                "enum": ["light", "dark"],
                "example": "light"
              }
            }
          }
        }
      },
      "Error400": {
        "type": "object",
        "properties": {
          "message": { "type": "string", "example": "Invalid request data" }
        }
      },
      "Error401": {
        "type": "object",
        "properties": {
          "message": { "type": "string", "example": "Invalid credentials" }
        }
      },
      "Error403": {
        "type": "object",
        "properties": {
          "message": { "type": "string", "example": "User is not verified" }
        }
      },
      "Error404": {
        "type": "object",
        "properties": {
          "message": { "type": "string", "example": "Resource not found" }
        }
      },
      "Error409": {
        "type": "object",
        "properties": {
          "message": { "type": "string", "example": "User with this email is already registered" }
        }
      },
      "Error500": {
        "type": "object",
        "properties": {
          "message": { "type": "string", "example": "Internal server error. Please try again later" }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}